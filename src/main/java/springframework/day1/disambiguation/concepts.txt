CONCEPT 1) NoUniqueBeanDefinitionException

When two classes implements same interface and the reference used in the service class is of the interface then we will
get this exception when spring tries to inject the dependency as spring gets confused to inject which dependency among the
two present beans of same type.

To solve this exception we have @Qualifier annotation in which we give a string in @Qualifier("english") on class level.
and when we are using it in the serice we will again use the same @Qualifier annotaion with the same
string "english" which will tell the spring to use the EnglishSpamChecker among the two available beans
of SpamChecker type.
Example:
@Component
public class GuestBookServices {
    @Autowired
    @Qualifier("english")
    private SpamChecker spamChecker;
    @Autowired
    private JpaRepository jpaRepository;
    @Autowired
    private RateLimiter rateLimiter;
}

@Component
@Qualifier("english")
public class EnglishSpamChecker implements SpamChecker{
    Set<String> spamWords;
}

@Component
@Qualifier("french")
public class FrenchSpamChecker implements SpamChecker {
    Set<String> spamWords;
}
________________________________________________________________________________________________________________________
CONCEPT 2) Decorator pattern
When we have some additional information on which we can distinguish two similar type of objects then we use this
decorator pattern where we create a SpamCheckerFactory class which returns the correct object based on some logic
through a method.

for example we have SpamCheckerFactory class which has a method getSpamChecker() method that returns object of
SpamChecker type (either EnglishSpamChecker or FrenchSpamChecker) based on the language of the content.
Example:
@Component
public class SpamCheckerFactory {

    @Autowired
    @Qualifier("english")
    private SpamChecker englishSpamChecker;
    @Autowired
    @Qualifier("french")
    private SpamChecker frenchSpamChecker;

    public SpamChecker getSpamChecker(Language language){
        if(language==Language.FRENCH)
            return this.frenchSpamChecker;
        else
            return this.englishSpamChecker;
    }
}

In the GuestBookService class we can define a method with @Autowired annotation so that it maps the
spamChecker reference according to the Language of the content.
@Autowired
    public void getSpamChecker(SpamCheckerFactory spamCheckerFactory){
        this.spamChecker = spamCheckerFactory.getSpamChecker(Language.ENGLISH);
    }
________________________________________________________________________________________________________________________
