CONCEPT 1) Singleton beans

By default spring container always creates singleton beans.
We can observe that by printing the hashcode of the object by using

Example
HotelGuestService hotelGuestService = applicationContext.getBean(HotelGuestService.class);
System.out.println(hotelGuestService);
HotelGuestService hotelGuestService1 = applicationContext.getBean(HotelGuestService.class);
System.out.println(hotelGuestService1);

We will observe that the hashcode is same in both the cases.
Which means same object is pulled by the container when we are using getBean(MyClass.class);
________________________________________________________________________________________________________________________
CONCEPT 2) Using scope annotation.

If we want spring to create a new object everytime we ask for the bean from the spring container we will use @Scope
annotation.
Example

@Component
@Scope("prototype")
public class HotelGuestService {
}

public class Client {
    public static void main(String[] args) {
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext("springframework.day2.scope");
        HotelGuestService hotelGuestService = applicationContext.getBean(HotelGuestService.class);
        System.out.println(hotelGuestService);
        HotelGuestService hotelGuestService1 = applicationContext.getBean(HotelGuestService.class);
        System.out.println(hotelGuestService1);
    }
}

This will print two different hashcode which means now the two objects are different.
________________________________________________________________________________________________________________________
